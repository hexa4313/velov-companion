BUILD_IMAGE = false        # build docker image from Dockerfile
PROVISION_DOCKER = true    # install docker daemon on virtual machine
REMOVE_CONTAINER = true    # kill and remove the solr-container so it can be restarted
CLEAN_DATABASE = true      # erase all the data from the database
RUN_CONTAINER = true       # run the solr-container


Vagrant.configure("2") do |config|

	if REMOVE_CONTAINER
		config.vm.provision "shell", path: "./scripts/cleandocker.sh"
	end

	if CLEAN_DATABASE
		config.vm.provision "shell", path: "./scripts/clean_database.sh"
	end

	# Building the images
	config.vm.provision "docker" do |d|
		# d.build_image "/app/env/database"


		if BUILD_IMAGE
			#d.pull_images "postgres:latest"
			d.build_image "/app/env/server",
			args: "-t rittme/velov-companion-server"

			d.build_image "/app/env/database",
			args: "-t rittme/velov-companion-database"
		end
	end

	# Running the images
	config.vm.provision "docker", run: "always" do |d|
		if RUN_CONTAINER
			#d.run "postgres:latest",
			#args: "--name velov-companion-postgres \
			#-e POSTGRES_ROOT_PASSWORD=#{POSTGRES_ROOT_PASSWORD}\
			#-e POSTGRES_DATABASE=#{POSTGRES_DATABASE} \
			#-e POSTGRES_USER=#{POSTGRES_USER} \
			#-v /app/env/database:/var/lib/postgres \
			#-d \
			#-p 5432:5432"
			d.run "rittme/velov-companion-database",
			args: " --name velov-companion-database \
			-v /app/env/local/database:/var/lib/postgres \
			-d \
			-p 5432:5432"

			d.run "rittme/velov-companion-server",
			args: "-v '/app/src:/app' --restart=on-failure -p 8888:8000 --link lyon-tour-database:webdb"
		end

	end

	config.vm.provision "shell", run: "always", path: "./scripts/startup.sh"
	config.vm.provision "shell", path: "./scripts/provision.sh"

	config.vm.provider "virtualbox" do |v|
		v.memory = 1024
		v.cpus = 2
	end
	config.vm.box = "ubuntu/trusty64"
	config.vm.synced_folder "..", "/app", :mount_options => ['dmode=777,fmode=666']
	

	config.vm.network "forwarded_port", guest: 8888, host: 8888
	config.vm.network "forwarded_port", guest: 8000, host: 8000
	config.vm.network "forwarded_port", guest: 8081, host: 8081
	config.vm.network "forwarded_port", guest: 5432, host: 5432

end